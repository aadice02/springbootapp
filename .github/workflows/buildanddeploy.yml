name: CI/CD

on:
  push:
    branches:
      - main
  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 18
        uses: actions/setup-java@v2
        with:
          java-version: 18
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and test with Maven
        run: mvn --batch-mode --update-snapshots --no-transfer-progress clean package

      - name: Upload JAR file
        uses: actions/upload-artifact@v2
        with:
          name: app-jar
          path: target/*.jar

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=sonar_abhi_test
            -Dsonar.projectkey=sonar-abhi-test
            -Dsonar.project=springbootapp
            -Dsonar.verbose=true    

      - name: Secret scan with Gitleaks
        uses: zricethezav/gitleaks-action@v1
        with:
          args: --path=./ --report=gitleaks-report.json --exit-code=1 --redact

      - name: Upload Gitleaks report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Download JAR file
        uses: actions/download-artifact@v2
        with:
          name: app-jar
          path: target

      - name: Build Docker image
        run: docker build -t "683512555361.dkr.ecr.us-east-1.amazonaws.com/my-spring-boot-app" .

      - name: Install and configure AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 683512555361.dkr.ecr.us-east-1.amazonaws.com

      - name: Tag and push Docker image
        run: |
          docker tag 683512555361.dkr.ecr.us-east-1.amazonaws.com/my-spring-boot-app:latest 683512555361.dkr.ecr.us-east-1.amazonaws.com/my-spring-boot-app:${GITHUB_SHA}
          docker push 683512555361.dkr.ecr.us-east-1.amazonaws.com/my-spring-boot-app:${GITHUB_SHA}

      - name: Deploy to EKS using Helm
        run: |
          aws eks update-kubeconfig --region us-east-1 --name terraform-eks
          export ECR_REPOSITORY_URL="683512555361.dkr.ecr.us-east-1.amazonaws.com/my-spring-boot-app:${GITHUB_SHA}"
          helm repo add stable https://charts.helm.sh/stable
          helm repo update
          helm upgrade --install my-spring-boot-app ./demo-app-helm --set image.tag=${GITHUB_SHA}

